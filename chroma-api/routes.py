from flask import Blueprint, request, jsonify
from chroma_utils import ChromaManager
from readers import DocumentReader
import logging
from datetime import datetime
import json
import os

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
ERROR_LOG_PATH = os.path.join(CURRENT_DIR, 'error.txt')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

def log_error(error_msg: str):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –∏ –æ—à–∏–±–∫–æ–π
        current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        error_json = json.dumps({"error": str(error_msg)})
        log_entry = f"{current_time}\n{error_json}\n\n"

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        with open(ERROR_LOG_PATH, 'a', encoding='utf-8') as f:
            f.write(log_entry)
    except Exception as e:
        logging.error(f"Error in error logging: {str(e)}")

app1 = Blueprint('app1', __name__)
# –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
chroma_manager = None

def get_chroma_manager():
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaManager"""
    global chroma_manager
    if chroma_manager is None:
        chroma_manager = ChromaManager()
    return chroma_manager

@app1.route('/health', methods=['GET'])
def health():
    """
    Health Check endpoint –¥–ª—è Docker –∏ Traefik
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ChromaDB
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ChromaDB
        get_chroma_manager().client.heartbeat()
        return jsonify({
            "status": "healthy",
            "service": "chroma-api",
            "chroma_connected": True
        }), 200
    except Exception as e:
        return jsonify({
            "status": "unhealthy",
            "service": "chroma-api",
            "chroma_connected": False,
            "error": str(e)
        }), 503

@app1.route('/api', methods=['POST'])
def api():
    try:
        # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        api_token = request.headers.get('x-chroma-api-token')
        expected_token = os.getenv('CHROMA_API_TOKEN')

        if not api_token or api_token != expected_token:
            error_msg = "Unauthorized: Invalid or missing API token"
            log_error(error_msg)
            return jsonify({"error": error_msg}), 401

        data = request.get_json()
        if not data:
            error_msg = "No JSON data provided"
            log_error(error_msg)
            return jsonify({"error": error_msg}), 400

        action = data.get('action')
        if not action:
            error_msg = "No action specified"
            log_error(error_msg)
            return jsonify({"error": error_msg}), 400

        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π
        handlers = {
            'upsert': handle_upsert,
            'upsert_json': handle_upsert_json,
            'delete_file': handle_delete_file,
            'delete_collection': handle_delete_collection,
            'show_collection': handle_show_collection,
            'count': handle_count,
            'query': handle_query
        }

        handler = handlers.get(action)
        if not handler:
            error_msg = f"Unknown action: {action}"
            log_error(error_msg)
            return jsonify({"error": error_msg}), 400

        return handler(data)

    except Exception as e:
        error_msg = f"Error in api endpoint: {str(e)}"
        log_error(error_msg)
        return jsonify({"error": error_msg}), 500

def handle_upsert(data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    """
    try:
        file_url = data.get('file_name')
        if not file_url:
            error_msg = "file_name is required"
            log_error(error_msg)
            return jsonify({"error": error_msg}), 400

        collection_name = data.get('collection_name')
        if not collection_name:
            error_msg = "collection_name is required"
            log_error(error_msg)
            return jsonify({"error": error_msg}), 400

        logging.info(f"Starting file upload from {file_url} to collection {collection_name}")

        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫–∏
        content = DocumentReader.read_file(
            file_url,
            chunk_size=data.get('chunk_size'),
            chunk_overlap=data.get('chunk_overlap'),
            custom_separators=data.get('custom_separators')
        )

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ content - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if not isinstance(content, list):
            content = [content]

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = data.get('metadata')
        metadata_list = [metadata] * len(content) if metadata else None

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º api_key
        result = get_chroma_manager().add_documents(
            collection_name=collection_name,
            texts=content,
            metadata=metadata_list,
            api_key=data.get('openai_api_key'),
            model_name=data.get('model_name')
        )

        logging.info(f"Successfully uploaded to collection {collection_name}")
        return jsonify(result)

    except Exception as e:
        error_msg = f"Error in upsert: {str(e)}"
        log_error(error_msg)
        return jsonify({"error": error_msg}), 500

def handle_upsert_json(data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON –¥–∞–Ω–Ω—ã—Ö —Å —É—á—ë—Ç–æ–º –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–µ—Ç–∞–¥–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞.
    """
    try:
        collection_name = data.get('collection_name')
        if not collection_name:
            error_msg = "collection_name is required"
            log_error(error_msg)
            return jsonify({"error": error_msg}), 400

        json_data = data.get('json_data')
        if not json_data:
            error_msg = "json_data is required"
            log_error(error_msg)
            return jsonify({"error": error_msg}), 400

        separate_chunks = data.get('separate_chunks', False)

        texts = []
        metadata_list = []

        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –º–µ—Ç–∞–¥–∞—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        global_metadata = data.get('metadata', {})
        if global_metadata is None:
            global_metadata = {}
        elif not isinstance(global_metadata, dict):
            error_msg = "–ì–ª–æ–±–∞–ª—å–Ω–∞—è metadata –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º"
            log_error(error_msg)
            return jsonify({"error": error_msg}), 400

        if separate_chunks:
            # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ { "questions": [ ... ] }
            chunks = json_data.get('questions')
            if chunks and isinstance(chunks, list):
                for chunk in chunks:
                    if isinstance(chunk, dict):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–ª—è "text"
                        text = chunk.get('text')
                        if not text:
                            text = ""
                        texts.append(text)

                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        chunk_metadata = chunk.get('metadata', {})
                        if chunk_metadata is None:
                            chunk_metadata = {}
                        elif not isinstance(chunk_metadata, dict):
                            error_msg = "–ü–æ–ª–µ metadata –¥–ª—è —á–∞–Ω–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º"
                            log_error(error_msg)
                            return jsonify({"error": error_msg}), 400

                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –º–µ—Ç–∞–¥–∞—Ç—É –∏ –º–µ—Ç–∞–¥–∞—Ç—É —á–∞–Ω–∫–∞
                        merged_metadata = dict(global_metadata)
                        merged_metadata.update(chunk_metadata)

                        # –ï—Å–ª–∏ –∫–ª—é—á 'source' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                        if 'source' not in merged_metadata:
                            merged_metadata['source'] = 'api'
                        metadata_list.append(merged_metadata)
                    else:
                        texts.append(str(chunk))
                        merged_metadata = dict(global_metadata)
                        if 'source' not in merged_metadata:
                            merged_metadata['source'] = 'api'
                        metadata_list.append(merged_metadata)
            else:
                texts.append(json.dumps(json_data, ensure_ascii=False, indent=2))
                merged_metadata = dict(global_metadata)
                if 'source' not in merged_metadata:
                    merged_metadata['source'] = 'api'
                metadata_list.append(merged_metadata)
        else:
            texts.append(json.dumps(json_data, ensure_ascii=False, indent=2))
            merged_metadata = dict(global_metadata)
            if 'source' not in merged_metadata:
                merged_metadata['source'] = 'api'
            metadata_list.append(merged_metadata)

        result = get_chroma_manager().add_documents(
            collection_name=collection_name,
            texts=texts,
            metadata=metadata_list,
            api_key=data.get('openai_api_key'),
            model_name=data.get('model_name')
        )
        return jsonify(result)

    except Exception as e:
        error_msg = f"Error in upsert_json: {str(e)}"
        log_error(error_msg)
        return jsonify({"error": error_msg}), 500


def handle_delete_file(data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
    """
    try:
        collection_name = data.get('collection_name')
        if not collection_name:
            error_msg = "collection_name is required"
            log_error(error_msg)
            return jsonify({"error": error_msg}), 400

        filters = data.get('filters', {})

        result = get_chroma_manager().delete_documents(
            collection_name=collection_name,
            filters=filters
        )
        return jsonify(result)

    except Exception as e:
        error_msg = f"Error in delete_file: {str(e)}"
        log_error(error_msg)
        return jsonify({"error": error_msg}), 500

def handle_delete_collection(data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    """
    try:
        collection_name = data.get('collection_name')
        if not collection_name:
            error_msg = "collection_name is required"
            log_error(error_msg)
            return jsonify({"error": error_msg}), 400

        result = get_chroma_manager().delete_collection(collection_name)
        return jsonify(result)

    except Exception as e:
        error_msg = f"Error in delete_collection: {str(e)}"
        log_error(error_msg)
        return jsonify({"error": error_msg}), 500

def handle_show_collection(data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    """
    try:
        collection_name = data.get('collection_name')
        if not collection_name:
            error_msg = "collection_name is required"
            log_error(error_msg)
            return jsonify({"error": error_msg}), 400

        filters = data.get('filters', {})

        result = get_chroma_manager().get_documents(
            collection_name=collection_name,
            filters=filters
        )
        return jsonify(result)

    except Exception as e:
        error_msg = f"Error in show_collection: {str(e)}"
        log_error(error_msg)
        return jsonify({"error": error_msg}), 500

def handle_count(data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    """
    try:
        collection_name = data.get('collection_name')
        if not collection_name:
            error_msg = "collection_name is required"
            log_error(error_msg)
            return jsonify({"error": error_msg}), 400

        result = get_chroma_manager().count_documents(collection_name)
        return jsonify(result)

    except Exception as e:
        error_msg = f"Error in count: {str(e)}"
        log_error(error_msg)
        return jsonify({"error": error_msg}), 500

def handle_query(data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    """
    try:
        collection_name = data.get('collection_name')
        if not collection_name:
            error_msg = "collection_name is required"
            log_error(error_msg)
            return jsonify({"error": error_msg}), 400

        query_text = data.get('query')
        if not query_text:
            error_msg = "query is required"
            log_error(error_msg)
            return jsonify({"error": error_msg}), 400

        n_results = data.get('n_results', 4)
        model_name = data.get('model_name', 'text-embedding-3-large')
        filters = data.get('filters')  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

        result = get_chroma_manager().query_collection(
            collection_name=collection_name,
            query_text=query_text,
            n_results=n_results,
            api_key=data.get('openai_api_key'),
            model_name=model_name,
            filters=filters  # –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ñ—É–Ω–∫—Ü–∏—é
        )
        return jsonify(result)

    except Exception as e:
        error_msg = f"Error in query: {str(e)}"
        log_error(error_msg)
        return jsonify({"error": error_msg}), 500
