# docker-compose.yml

services:
  traefik:
    image: traefik:v3.0
    container_name: service_traefik
    restart: unless-stopped
    environment:
      - TZ=${TZ}
    ports:
      - "80:80"         # HTTP endpoint для ACME challenge
      - "127.0.0.1:8082:8080"  # Dashboard Traefik - LOCALHOST ONLY for security
      - "443:443"       # HTTPS endpoint для Node-RED
      - "5050:5050"     # HTTPS endpoint для Flowise
      - "7040:7040"     # HTTPS endpoint для LightRAG Default
      - "7041:7041"     # HTTPS endpoint для LightRAG Project A
      - "7042:7042"     # HTTPS endpoint для LightRAG Project B
      - "8333:8333"     # HTTPS endpoint для Chroma-API
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik
      - ./letsencrypt:/letsencrypt
      - ./certs:/certs
      - ./logs:/var/log
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    command:
      - --configfile=/etc/traefik/traefik.yml
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
    env_file: .env
    networks:
      - internal
    # Dashboard available only on localhost:8082 for security

  # ===========================================
  # DATABASE (MySQL) - INTERNAL ONLY
  # ===========================================
  mysql_db:
    image: mysql:8.0
    container_name: service_mysql
    env_file: .env
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      TZ: ${TZ}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql_init:/docker-entrypoint-initdb.d
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    # SECURITY: No external ports exposed - only internal network access
    # ports:
    #   - "${MYSQL_EXTERNAL_PORT:-3306}:3306"
    restart: unless-stopped
    networks:
      - internal
    command: --default-authentication-plugin=mysql_native_password

  # ===========================================
  # DATABASE MANAGEMENT (phpMyAdmin)
  # ===========================================
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: service_phpmyadmin
    environment:
      PMA_HOST: mysql_db
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      PMA_ABSOLUTE_URI: https://${DOMAIN}/phpmyadmin/
      TZ: ${TZ}
    depends_on:
      - mysql_db
    restart: unless-stopped
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      # HTTP роутер с редиректом на HTTPS
      - "traefik.http.routers.phpmyadmin-http.rule=Host(`${DOMAIN}`) && PathPrefix(`/phpmyadmin`)"
      - "traefik.http.routers.phpmyadmin-http.entrypoints=web"
      - "traefik.http.routers.phpmyadmin-http.middlewares=phpmyadmin-https-redirect"
      - "traefik.http.routers.phpmyadmin-http.priority=210"
      # HTTPS роутер для phpMyAdmin
      - "traefik.http.routers.phpmyadmin-https.rule=Host(`${DOMAIN}`) && PathPrefix(`/phpmyadmin`)"
      - "traefik.http.routers.phpmyadmin-https.entrypoints=websecure"
      - "traefik.http.routers.phpmyadmin-https.tls=true"
      - "traefik.http.routers.phpmyadmin-https.tls.certresolver=letsencrypt"
      - "traefik.http.routers.phpmyadmin-https.priority=210"
      - "traefik.http.routers.phpmyadmin-https.middlewares=phpmyadmin-strip-prefix"
      # Сервис phpMyAdmin
      - "traefik.http.services.phpmyadmin.loadbalancer.server.port=80"
      # Middleware для редиректа на HTTPS
      - "traefik.http.middlewares.phpmyadmin-https-redirect.redirectscheme.scheme=https"
      # Middleware для удаления /phpmyadmin prefix
      - "traefik.http.middlewares.phpmyadmin-strip-prefix.stripprefix.prefixes=/phpmyadmin"

  # Node-RED Configuration Generator
  nodered-init:
    image: node:18-alpine
    container_name: service_nodered_init
    environment:
      - NODE_RED_PASSWORD=${NODE_RED_PASSWORD}
      - NODE_RED_CREDENTIAL_SECRET=${NODE_RED_PASSWORD}
    volumes:
      - nodered_data:/data
      - ./nodered-config/generate-settings.sh:/usr/local/bin/generate-settings.sh:ro
    command: ["sh", "/usr/local/bin/generate-settings.sh"]
    networks:
      - internal

  # Node-RED Service
  nodered:
    image: nodered/node-red:latest
    container_name: service_nodered
    restart: unless-stopped
    command: ["node-red", "--settings", "/data/settings.js"]
    depends_on:
      - nodered-init
    environment:
      - TZ=${TZ}
      - NODE_RED_ENABLE_PROJECTS=true
      - NODE_RED_CREDENTIAL_SECRET=${NODE_RED_PASSWORD}
      - NODE_OPTIONS=--max_old_space_size=128
    volumes:
      - nodered_data:/data
      - /var/www/html/data:/data/public
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      # HTTP роутер с редиректом на HTTPS
      - "traefik.http.routers.nodered-http.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.nodered-http.entrypoints=web"
      - "traefik.http.routers.nodered-http.middlewares=nodered-https-redirect"
      # HTTPS роутер для Node-RED на порту 443
      - "traefik.http.routers.nodered-https.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.nodered-https.entrypoints=websecure"
      - "traefik.http.routers.nodered-https.priority=200"
      - "traefik.http.routers.nodered-https.tls=true"
      - "traefik.http.routers.nodered-https.tls.certresolver=letsencrypt"
      # Сервис Node-RED
      - "traefik.http.services.nodered.loadbalancer.server.port=1880"
      # Middleware для редиректа на HTTPS
      - "traefik.http.middlewares.nodered-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.nodered-https-redirect.redirectscheme.port=443"

  # Flowise AI Service
  flowise:
    image: flowiseai/flowise:${FLOWISE_VERSION}
    container_name: service_flowise
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - FLOWISE_USERNAME=${FLOWISE_EMAIL}
      - FLOWISE_PASSWORD=${FLOWISE_PASSWORD}
      - PORT=3000
      - DATABASE_PATH=/opt/flowise/.flowise
      - APIKEY_PATH=/opt/flowise/.flowise
      - SECRETKEY_PATH=/opt/flowise/.flowise
      - LOG_PATH=/opt/flowise/.flowise/logs
      - BLOB_STORAGE_PATH=/opt/flowise/.flowise/storage
    volumes:
      - flowise_data:/opt/flowise/.flowise
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      # HTTP роутер с редиректом на HTTPS
      - "traefik.http.routers.flowise-http.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.flowise-http.entrypoints=web"
      - "traefik.http.routers.flowise-http.middlewares=flowise-https-redirect"
      # HTTPS роутер для Flowise на порту 5050
      - "traefik.http.routers.flowise-https.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.flowise-https.entrypoints=websecure-5050"
      - "traefik.http.routers.flowise-https.priority=100"
      - "traefik.http.routers.flowise-https.tls=true"
      - "traefik.http.routers.flowise-https.tls.certresolver=letsencrypt"
      # Сервис Flowise
      - "traefik.http.services.flowise.loadbalancer.server.port=3000"
      # Middleware для редиректа на HTTPS
      - "traefik.http.middlewares.flowise-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.flowise-https-redirect.redirectscheme.port=5050"

  # LightRAG AI Service
  lightrag:
    image: ghcr.io/hkuds/lightrag:latest
    container_name: service_lightrag
    hostname: lightrag
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - TIKTOKEN_CACHE_DIR=/app/data/tiktoken
      - PORT=9621
    volumes:
      - lightrag_storage:/app/data/rag_storage
      - ./lightrag/data/inputs:/app/data/inputs
      - ./lightrag/data/tiktoken:/app/data/tiktoken
      - ./lightrag/config.ini:/app/config.ini
      - ./.env:/app/.env:ro
      - ./shared:/data/shared
      - ./lightrag/patches/document_routes.py:/app/lightrag/api/routers/document_routes.py:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      # HTTP роутер с редиректом на HTTPS
      - "traefik.http.routers.lightrag-http.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.lightrag-http.entrypoints=web"
      - "traefik.http.routers.lightrag-http.middlewares=lightrag-https-redirect"
      # HTTPS роутер для LightRAG на порту 7040
      - "traefik.http.routers.lightrag-https.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.lightrag-https.entrypoints=websecure-7040"
      - "traefik.http.routers.lightrag-https.priority=90"
      - "traefik.http.routers.lightrag-https.tls=true"
      - "traefik.http.routers.lightrag-https.tls.certresolver=letsencrypt"
      # Сервис LightRAG
      - "traefik.http.services.lightrag.loadbalancer.server.port=9621"
      # Middleware для редиректа на HTTPS
      - "traefik.http.middlewares.lightrag-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.lightrag-https-redirect.redirectscheme.port=7040"

  # ===========================================
  # LIGHTRAG PROJECT A
  # ===========================================
  # lightrag_project_a:
  #   image: ghcr.io/hkuds/lightrag:latest
  #   container_name: service_lightrag_project_a
  #   hostname: lightrag-project-a
  #   restart: unless-stopped
  #   environment:
  #     - TZ=${TZ}
  #     - TIKTOKEN_CACHE_DIR=/app/data/tiktoken
  #     - PORT=9621
  #   volumes:
  #     # ВАЖНО: Используем тот же volume для персистентности
  #     - lightrag_storage:/app/data/rag_storage
  #     - ./lightrag/data/inputs:/app/data/inputs
  #     - ./lightrag/data/tiktoken:/app/data/tiktoken
  #     - ./lightrag/config.ini:/app/config.ini
  #     - ./.env:/app/.env:ro
  #     - ./shared:/data/shared
  #     - ./lightrag/patches/document_routes.py:/app/lightrag/api/routers/document_routes.py:ro
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   env_file:
  #     - .env
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   networks:
  #     - internal
  #   # КЛЮЧЕВОЙ МОМЕНТ: передаём workspace через command
  #   command: ["--workspace", "project_a", "--port", "9621"]
  #   labels:
  #     - "traefik.enable=true"
  #     # HTTP роутер с редиректом на HTTPS
  #     - "traefik.http.routers.lightrag-a-http.rule=Host(`${DOMAIN}`)"
  #     - "traefik.http.routers.lightrag-a-http.entrypoints=web"
  #     - "traefik.http.routers.lightrag-a-http.middlewares=lightrag-a-https-redirect"
  #     # HTTPS роутер для LightRAG Project A на порту 7041
  #     - "traefik.http.routers.lightrag-a-https.rule=Host(`${DOMAIN}`)"
  #     - "traefik.http.routers.lightrag-a-https.entrypoints=websecure-7041"
  #     - "traefik.http.routers.lightrag-a-https.priority=91"
  #     - "traefik.http.routers.lightrag-a-https.tls=true"
  #     - "traefik.http.routers.lightrag-a-https.tls.certresolver=letsencrypt"
  #     # Сервис LightRAG Project A
  #     - "traefik.http.services.lightrag-a.loadbalancer.server.port=9621"
  #     # Middleware для редиректа на HTTPS
  #     - "traefik.http.middlewares.lightrag-a-https-redirect.redirectscheme.scheme=https"
  #     - "traefik.http.middlewares.lightrag-a-https-redirect.redirectscheme.port=7041"

  # ===========================================
  # LIGHTRAG PROJECT B
  # ===========================================
  # lightrag_project_b:
  #   image: ghcr.io/hkuds/lightrag:latest
  #   container_name: service_lightrag_project_b
  #   hostname: lightrag-project-b
  #   restart: unless-stopped
  #   environment:
  #     - TZ=${TZ}
  #     - TIKTOKEN_CACHE_DIR=/app/data/tiktoken
  #     - PORT=9621
  #   volumes:
  #     # ВАЖНО: Тот же volume для общего хранилища
  #     - lightrag_storage:/app/data/rag_storage
  #     - ./lightrag/data/inputs:/app/data/inputs
  #     - ./lightrag/data/tiktoken:/app/data/tiktoken
  #     - ./lightrag/config.ini:/app/config.ini
  #     - ./.env:/app/.env:ro
  #     - ./shared:/data/shared
  #     - ./lightrag/patches/document_routes.py:/app/lightrag/api/routers/document_routes.py:ro
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   env_file:
  #     - .env
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   networks:
  #     - internal
  #   # ИЗМЕНЕНО: workspace = "project_b"
  #   command: ["--workspace", "project_b", "--port", "9621"]
  #   labels:
  #     - "traefik.enable=true"
  #     # HTTP роутер с редиректом на HTTPS
  #     - "traefik.http.routers.lightrag-b-http.rule=Host(`${DOMAIN}`)"
  #     - "traefik.http.routers.lightrag-b-http.entrypoints=web"
  #     - "traefik.http.routers.lightrag-b-http.middlewares=lightrag-b-https-redirect"
  #     # HTTPS роутер для LightRAG Project B на порту 7042
  #     - "traefik.http.routers.lightrag-b-https.rule=Host(`${DOMAIN}`)"
  #     - "traefik.http.routers.lightrag-b-https.entrypoints=websecure-7042"
  #     - "traefik.http.routers.lightrag-b-https.priority=92"
  #     - "traefik.http.routers.lightrag-b-https.tls=true"
  #     - "traefik.http.routers.lightrag-b-https.tls.certresolver=letsencrypt"
  #     # Сервис LightRAG Project B
  #     - "traefik.http.services.lightrag-b.loadbalancer.server.port=9621"
  #     # Middleware для редиректа на HTTPS
  #     - "traefik.http.middlewares.lightrag-b-https-redirect.redirectscheme.scheme=https"
  #     - "traefik.http.middlewares.lightrag-b-https-redirect.redirectscheme.port=7042"

  # Redis Service - INTERNAL ONLY
  redis:
    image: redis:7-alpine
    container_name: service_redis
    restart: unless-stopped
    environment:
      - TZ=${TZ}
    # SECURITY: No external ports exposed - only internal network access
    # ports:
    #   - "6379:6379"
    volumes:
      - redis_data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - internal
    command: redis-server --appendonly yes

  # ===========================================
  # VECTOR DATABASE (Chroma) - INTERNAL ONLY
  # ===========================================
  chroma:
    image: chromadb/chroma:1.0.0
    container_name: service_chroma
    restart: unless-stopped
    environment:
      - TZ=${TZ}
    # SECURITY: No external ports exposed - only internal network access
    # ports:
    #   - "8333:8000"
    volumes:
      - chroma_data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - internal

  # ===========================================
  # CHROMA API SERVICE
  # ===========================================
  chroma-api:
    build:
      context: ./chroma-api
      dockerfile: Dockerfile
    container_name: service_chroma_api
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - CHROMA_SERVER_HOST=${CHROMA_SERVER_HOST}
      - CHROMA_SERVER_PORT=${CHROMA_SERVER_PORT}
      - CHROMA_MODEL=${CHROMA_MODEL}
      - CHROMA_DEFAULT_CHUNK_SIZE=${CHROMA_DEFAULT_CHUNK_SIZE}
      - CHROMA_DEFAULT_CHUNK_OVERLAP=${CHROMA_DEFAULT_CHUNK_OVERLAP}
      - CHROMA_API_TOKEN=${CHROMA_API_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - chroma
      - traefik
    networks:
      - internal
    volumes:
      - ./shared:/data/shared
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "traefik.enable=true"

      # HTTP роутер с редиректом на HTTPS
      - "traefik.http.routers.chromaapi-http.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.chromaapi-http.entrypoints=web"
      - "traefik.http.routers.chromaapi-http.middlewares=chromaapi-https-redirect"

      # HTTPS роутер для Chroma-API на порту 8333
      - "traefik.http.routers.chromaapi-https.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.chromaapi-https.entrypoints=websecure-8333"
      - "traefik.http.routers.chromaapi-https.priority=80"
      - "traefik.http.routers.chromaapi-https.tls=true"
      - "traefik.http.routers.chromaapi-https.tls.certresolver=letsencrypt"

      # Middlewares - Rate Limiting и Compression
      - "traefik.http.middlewares.chromaapi-ratelimit.ratelimit.average=100"
      - "traefik.http.middlewares.chromaapi-ratelimit.ratelimit.burst=50"
      - "traefik.http.middlewares.chromaapi-ratelimit.ratelimit.period=1s"
      - "traefik.http.middlewares.chromaapi-compress.compress=true"

      # Применяем middlewares к HTTPS роутеру
      - "traefik.http.routers.chromaapi-https.middlewares=chromaapi-ratelimit,chromaapi-compress"

      # Сервис Chroma-API
      - "traefik.http.services.chromaapi.loadbalancer.server.port=3010"

      # Middleware для редиректа на HTTPS
      - "traefik.http.middlewares.chromaapi-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.chromaapi-https-redirect.redirectscheme.port=8333"

  # ===========================================
  # STATIC FILES SERVER (Nginx)
  # ===========================================
  nginx:
    image: nginx:alpine
    container_name: service_nginx_static
    restart: unless-stopped
    environment:
      - TZ=${TZ}
    networks:
      - internal
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      # Монтируем папку с статическими данными
      - /var/www/html/data:/usr/share/nginx/html/data:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "traefik.enable=true"
      # Маршрутизация /data/* на Nginx
      - "traefik.http.routers.static.rule=Host(`${DOMAIN}`) && PathPrefix(`/data`)"
      - "traefik.http.routers.static.entrypoints=websecure"
      - "traefik.http.routers.static.tls=true"
      - "traefik.http.routers.static.tls.certresolver=letsencrypt"
      - "traefik.http.routers.static.priority=300"
      - "traefik.http.services.static.loadbalancer.server.port=80"
      # Кеширование статики
      - "traefik.http.middlewares.static-cache.headers.customresponseheaders.Cache-Control=public, max-age=31536000"
      - "traefik.http.routers.static.middlewares=static-cache"
    depends_on:
      - traefik

networks:
  internal:
    driver: bridge # Стандартный сетевой драйвер Docker

volumes:
  mysql_data:       # Docker-managed volume для данных MySQL
  nodered_data:     # Docker-managed volume для данных Node-RED
  flowise_data:     # Docker-managed volume для данных Flowise
  lightrag_storage: # Docker-managed volume для данных LightRAG
  redis_data:       # Docker-managed volume для данных Redis
  chroma_data:      # Docker-managed volume для данных Chroma
  # service_sessions: # Закомментировано - используем bind mount
  # service_media:    # Закомментировано - используем bind mount